/*
* generated by Xtext
*/
grammar InternalAgeOfScala;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.xtext.mgse.aos.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.xtext.mgse.aos.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.xtext.mgse.aos.services.AgeOfScalaGrammarAccess;

}

@parser::members {

 	private AgeOfScalaGrammarAccess grammarAccess;
 	
    public InternalAgeOfScalaParser(TokenStream input, AgeOfScalaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Action";	
   	}
   	
   	@Override
   	protected AgeOfScalaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getActionShowBuildingsParserRuleCall_0_0()); 
	    }
		lv_action_0_1=ruleShowBuildings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"action",
        		lv_action_0_1, 
        		"ShowBuildings");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getActionBuildBuildingParserRuleCall_0_1()); 
	    }
		lv_action_0_2=ruleBuildBuilding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		add(
       			$current, 
       			"action",
        		lv_action_0_2, 
        		"BuildBuilding");
	        afterParserOrEnumRuleCall();
	    }

)

)
)+
;





// Entry rule entryRuleShowBuildings
entryRuleShowBuildings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowBuildingsRule()); }
	 iv_ruleShowBuildings=ruleShowBuildings 
	 { $current=$iv_ruleShowBuildings.current; } 
	 EOF 
;

// Rule ShowBuildings
ruleShowBuildings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Zeige alle' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShowBuildingsAccess().getZeigeAlleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getShowBuildingsAccess().getGebauedeBuildingTypesEnumRuleCall_1_0()); 
	    }
		lv_gebauede_1_0=ruleBuildingTypes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getShowBuildingsRule());
	        }
       		set(
       			$current, 
       			"gebauede",
        		lv_gebauede_1_0, 
        		"BuildingTypes");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBuildBuilding
entryRuleBuildBuilding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuildBuildingRule()); }
	 iv_ruleBuildBuilding=ruleBuildBuilding 
	 { $current=$iv_ruleBuildBuilding.current; } 
	 EOF 
;

// Rule BuildBuilding
ruleBuildBuilding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBuildBuildingAccess().getBuildTypeBuildTypeEnumRuleCall_0_0()); 
	    }
		lv_buildType_0_0=ruleBuildType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuildBuildingRule());
	        }
       		add(
       			$current, 
       			"buildType",
        		lv_buildType_0_0, 
        		"BuildType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='Geb\u00E4ude' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBuildBuildingAccess().getGebäudeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBuildBuildingAccess().getGebauedeBuildingsEnumRuleCall_2_0()); 
	    }
		lv_gebauede_2_0=ruleBuildings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBuildBuildingRule());
	        }
       		set(
       			$current, 
       			"gebauede",
        		lv_gebauede_2_0, 
        		"Buildings");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule BuildType
ruleBuildType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Baue' 
	{
        $current = grammarAccess.getBuildTypeAccess().getBUILDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBuildTypeAccess().getBUILDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Zerst\u00F6re' 
	{
        $current = grammarAccess.getBuildTypeAccess().getDESTROYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBuildTypeAccess().getDESTROYEnumLiteralDeclaration_1()); 
    }
));



// Rule BuildingTypes
ruleBuildingTypes returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Wohngeb\u00E4ude' 
	{
        $current = grammarAccess.getBuildingTypesAccess().getHOUSEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBuildingTypesAccess().getHOUSEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Produzierendes Geb\u00E4ude' 
	{
        $current = grammarAccess.getBuildingTypesAccess().getPRODUCINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBuildingTypesAccess().getPRODUCINGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Lagergeb\u00E4ude' 
	{
        $current = grammarAccess.getBuildingTypesAccess().getSTOCKEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBuildingTypesAccess().getSTOCKEnumLiteralDeclaration_2()); 
    }
));



// Rule Buildings
ruleBuildings returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Holzf\u00E4ller' 
	{
        $current = grammarAccess.getBuildingsAccess().getLUMBERJACKEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBuildingsAccess().getLUMBERJACKEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Steinmetz' 
	{
        $current = grammarAccess.getBuildingsAccess().getMASONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBuildingsAccess().getMASONEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='J\u00E4ger' 
	{
        $current = grammarAccess.getBuildingsAccess().getHUNTEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBuildingsAccess().getHUNTEREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Fischerei' 
	{
        $current = grammarAccess.getBuildingsAccess().getFISHERMANEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBuildingsAccess().getFISHERMANEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


