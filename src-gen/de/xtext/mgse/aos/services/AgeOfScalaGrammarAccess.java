/*
* generated by Xtext
*/

package de.xtext.mgse.aos.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AgeOfScalaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Assignment cActionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cActionAlternatives_0 = (Alternatives)cActionAssignment.eContents().get(0);
		private final RuleCall cActionShowBuildingsParserRuleCall_0_0 = (RuleCall)cActionAlternatives_0.eContents().get(0);
		private final RuleCall cActionBuildBuildingParserRuleCall_0_1 = (RuleCall)cActionAlternatives_0.eContents().get(1);
		
		//Action:
		//
		//	action+=(ShowBuildings | BuildBuilding)+;
		public ParserRule getRule() { return rule; }

		//action+=(ShowBuildings | BuildBuilding)+
		public Assignment getActionAssignment() { return cActionAssignment; }

		//ShowBuildings | BuildBuilding
		public Alternatives getActionAlternatives_0() { return cActionAlternatives_0; }

		//ShowBuildings
		public RuleCall getActionShowBuildingsParserRuleCall_0_0() { return cActionShowBuildingsParserRuleCall_0_0; }

		//BuildBuilding
		public RuleCall getActionBuildBuildingParserRuleCall_0_1() { return cActionBuildBuildingParserRuleCall_0_1; }
	}

	public class ShowBuildingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowBuildings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZeigeAlleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGebauedeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGebauedeBuildingTypesEnumRuleCall_1_0 = (RuleCall)cGebauedeAssignment_1.eContents().get(0);
		
		//ShowBuildings:
		//
		//	"Zeige alle" gebauede=BuildingTypes;
		public ParserRule getRule() { return rule; }

		//"Zeige alle" gebauede=BuildingTypes
		public Group getGroup() { return cGroup; }

		//"Zeige alle"
		public Keyword getZeigeAlleKeyword_0() { return cZeigeAlleKeyword_0; }

		//gebauede=BuildingTypes
		public Assignment getGebauedeAssignment_1() { return cGebauedeAssignment_1; }

		//BuildingTypes
		public RuleCall getGebauedeBuildingTypesEnumRuleCall_1_0() { return cGebauedeBuildingTypesEnumRuleCall_1_0; }
	}

	public class BuildBuildingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuildBuilding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBuildTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBuildTypeBuildTypeEnumRuleCall_0_0 = (RuleCall)cBuildTypeAssignment_0.eContents().get(0);
		private final Keyword cGebäudeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGebauedeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGebauedeBuildingsEnumRuleCall_2_0 = (RuleCall)cGebauedeAssignment_2.eContents().get(0);
		
		//BuildBuilding:
		//
		//	buildType+=BuildType "Gebäude" gebauede=Buildings;
		public ParserRule getRule() { return rule; }

		//buildType+=BuildType "Gebäude" gebauede=Buildings
		public Group getGroup() { return cGroup; }

		//buildType+=BuildType
		public Assignment getBuildTypeAssignment_0() { return cBuildTypeAssignment_0; }

		//BuildType
		public RuleCall getBuildTypeBuildTypeEnumRuleCall_0_0() { return cBuildTypeBuildTypeEnumRuleCall_0_0; }

		//"Gebäude"
		public Keyword getGebäudeKeyword_1() { return cGebäudeKeyword_1; }

		//gebauede=Buildings
		public Assignment getGebauedeAssignment_2() { return cGebauedeAssignment_2; }

		//Buildings
		public RuleCall getGebauedeBuildingsEnumRuleCall_2_0() { return cGebauedeBuildingsEnumRuleCall_2_0; }
	}
	
	
	public class BuildTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuildType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBUILDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBUILDBaueKeyword_0_0 = (Keyword)cBUILDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDESTROYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDESTROYZerstöreKeyword_1_0 = (Keyword)cDESTROYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BuildType:
		//
		//	BUILD="Baue" | DESTROY="Zerstöre";
		public EnumRule getRule() { return rule; }

		//BUILD="Baue" | DESTROY="Zerstöre"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BUILD="Baue"
		public EnumLiteralDeclaration getBUILDEnumLiteralDeclaration_0() { return cBUILDEnumLiteralDeclaration_0; }

		//"Baue"
		public Keyword getBUILDBaueKeyword_0_0() { return cBUILDBaueKeyword_0_0; }

		//DESTROY="Zerstöre"
		public EnumLiteralDeclaration getDESTROYEnumLiteralDeclaration_1() { return cDESTROYEnumLiteralDeclaration_1; }

		//"Zerstöre"
		public Keyword getDESTROYZerstöreKeyword_1_0() { return cDESTROYZerstöreKeyword_1_0; }
	}

	public class BuildingTypesElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BuildingTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHOUSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHOUSEWohngebäudeKeyword_0_0 = (Keyword)cHOUSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRODUCINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRODUCINGProduzierendesGebäudeKeyword_1_0 = (Keyword)cPRODUCINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTOCKEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTOCKLagergebäudeKeyword_2_0 = (Keyword)cSTOCKEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BuildingTypes:
		//
		//	HOUSE="Wohngebäude" | PRODUCING="Produzierendes Gebäude" | STOCK="Lagergebäude";
		public EnumRule getRule() { return rule; }

		//HOUSE="Wohngebäude" | PRODUCING="Produzierendes Gebäude" | STOCK="Lagergebäude"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HOUSE="Wohngebäude"
		public EnumLiteralDeclaration getHOUSEEnumLiteralDeclaration_0() { return cHOUSEEnumLiteralDeclaration_0; }

		//"Wohngebäude"
		public Keyword getHOUSEWohngebäudeKeyword_0_0() { return cHOUSEWohngebäudeKeyword_0_0; }

		//PRODUCING="Produzierendes Gebäude"
		public EnumLiteralDeclaration getPRODUCINGEnumLiteralDeclaration_1() { return cPRODUCINGEnumLiteralDeclaration_1; }

		//"Produzierendes Gebäude"
		public Keyword getPRODUCINGProduzierendesGebäudeKeyword_1_0() { return cPRODUCINGProduzierendesGebäudeKeyword_1_0; }

		//STOCK="Lagergebäude"
		public EnumLiteralDeclaration getSTOCKEnumLiteralDeclaration_2() { return cSTOCKEnumLiteralDeclaration_2; }

		//"Lagergebäude"
		public Keyword getSTOCKLagergebäudeKeyword_2_0() { return cSTOCKLagergebäudeKeyword_2_0; }
	}

	public class BuildingsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Buildings");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLUMBERJACKEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLUMBERJACKHolzfällerKeyword_0_0 = (Keyword)cLUMBERJACKEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMASONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMASONSteinmetzKeyword_1_0 = (Keyword)cMASONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHUNTEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHUNTERJägerKeyword_2_0 = (Keyword)cHUNTEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFISHERMANEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFISHERMANFischereiKeyword_3_0 = (Keyword)cFISHERMANEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Buildings:
		//
		//	LUMBERJACK="Holzfäller" | MASON="Steinmetz" | HUNTER="Jäger" | FISHERMAN="Fischerei";
		public EnumRule getRule() { return rule; }

		//LUMBERJACK="Holzfäller" | MASON="Steinmetz" | HUNTER="Jäger" | FISHERMAN="Fischerei"
		public Alternatives getAlternatives() { return cAlternatives; }

		//LUMBERJACK="Holzfäller"
		public EnumLiteralDeclaration getLUMBERJACKEnumLiteralDeclaration_0() { return cLUMBERJACKEnumLiteralDeclaration_0; }

		//"Holzfäller"
		public Keyword getLUMBERJACKHolzfällerKeyword_0_0() { return cLUMBERJACKHolzfällerKeyword_0_0; }

		//MASON="Steinmetz"
		public EnumLiteralDeclaration getMASONEnumLiteralDeclaration_1() { return cMASONEnumLiteralDeclaration_1; }

		//"Steinmetz"
		public Keyword getMASONSteinmetzKeyword_1_0() { return cMASONSteinmetzKeyword_1_0; }

		//HUNTER="Jäger"
		public EnumLiteralDeclaration getHUNTEREnumLiteralDeclaration_2() { return cHUNTEREnumLiteralDeclaration_2; }

		//"Jäger"
		public Keyword getHUNTERJägerKeyword_2_0() { return cHUNTERJägerKeyword_2_0; }

		//FISHERMAN="Fischerei"
		public EnumLiteralDeclaration getFISHERMANEnumLiteralDeclaration_3() { return cFISHERMANEnumLiteralDeclaration_3; }

		//"Fischerei"
		public Keyword getFISHERMANFischereiKeyword_3_0() { return cFISHERMANFischereiKeyword_3_0; }
	}
	
	private ActionElements pAction;
	private ShowBuildingsElements pShowBuildings;
	private BuildBuildingElements pBuildBuilding;
	private BuildTypeElements unknownRuleBuildType;
	private BuildingTypesElements unknownRuleBuildingTypes;
	private BuildingsElements unknownRuleBuildings;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public AgeOfScalaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.xtext.mgse.aos.AgeOfScala".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Action:
	//
	//	action+=(ShowBuildings | BuildBuilding)+;
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ShowBuildings:
	//
	//	"Zeige alle" gebauede=BuildingTypes;
	public ShowBuildingsElements getShowBuildingsAccess() {
		return (pShowBuildings != null) ? pShowBuildings : (pShowBuildings = new ShowBuildingsElements());
	}
	
	public ParserRule getShowBuildingsRule() {
		return getShowBuildingsAccess().getRule();
	}

	//BuildBuilding:
	//
	//	buildType+=BuildType "Gebäude" gebauede=Buildings;
	public BuildBuildingElements getBuildBuildingAccess() {
		return (pBuildBuilding != null) ? pBuildBuilding : (pBuildBuilding = new BuildBuildingElements());
	}
	
	public ParserRule getBuildBuildingRule() {
		return getBuildBuildingAccess().getRule();
	}

	//enum BuildType:
	//
	//	BUILD="Baue" | DESTROY="Zerstöre";
	public BuildTypeElements getBuildTypeAccess() {
		return (unknownRuleBuildType != null) ? unknownRuleBuildType : (unknownRuleBuildType = new BuildTypeElements());
	}
	
	public EnumRule getBuildTypeRule() {
		return getBuildTypeAccess().getRule();
	}

	//enum BuildingTypes:
	//
	//	HOUSE="Wohngebäude" | PRODUCING="Produzierendes Gebäude" | STOCK="Lagergebäude";
	public BuildingTypesElements getBuildingTypesAccess() {
		return (unknownRuleBuildingTypes != null) ? unknownRuleBuildingTypes : (unknownRuleBuildingTypes = new BuildingTypesElements());
	}
	
	public EnumRule getBuildingTypesRule() {
		return getBuildingTypesAccess().getRule();
	}

	//enum Buildings:
	//
	//	LUMBERJACK="Holzfäller" | MASON="Steinmetz" | HUNTER="Jäger" | FISHERMAN="Fischerei";
	public BuildingsElements getBuildingsAccess() {
		return (unknownRuleBuildings != null) ? unknownRuleBuildings : (unknownRuleBuildings = new BuildingsElements());
	}
	
	public EnumRule getBuildingsRule() {
		return getBuildingsAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
